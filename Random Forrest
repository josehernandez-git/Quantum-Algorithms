import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score

# Load Excel file (update filename as needed)
file_path = "your_file.xlsx"  # Change this to your actual file path
df = pd.read_excel(file_path, index_col=0)  # First column as index (WBS elements)

# Transpose data to make it suitable for ML
df = df.T  # Years as rows, WBS elements as columns
df.index = df.index.astype(int)  # Ensure year column is treated as integer

# Selecting features (WBS 1.01 to 1.06) and the target variable (future values)
features = df.columns[df.columns.str.startswith(('1.01', '1.02', '1.03', '1.04', '1.05', '1.06'))]
df_filtered = df[features].dropna()  # Remove missing values

# Define predictors (X) and target variable (y)
X = df_filtered.iloc[:-1, :]  # All years except the last for training
y = df_filtered.iloc[1:, :]  # Shifted by one year (predicting next year)

# Split training and testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Random Forest model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict on test set and evaluate
y_pred = model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Predict future (2025)
future_X = df_filtered.iloc[-1:, :]  # Last available year as input
predicted_2025 = model.predict(future_X)

# Convert to DataFrame for display
predicted_2025_df = pd.DataFrame(predicted_2025, columns=features, index=[2025])

# Save predictions to Excel
predicted_2025_df.to_excel("predicted_2025.xlsx")

# Display results
import ace_tools as tools
tools.display_dataframe_to_user(name="Predicted Costs for 2025", dataframe=predicted_2025_df)
